name: EstateAccessManagement CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '*.sln'
      - '**/*.csproj'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - '*.sln'
      - '**/*.csproj'

env:
  DOTNET_VERSION: '9.0.x'
  IMAGE_NAME: estateaccessmanagement-api
  SOLUTION_FILE: EstateAccessManagement.sln
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for deployment changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: |
          dotnet build ${{ env.SOLUTION_FILE }} \
            --no-restore \
            --configuration Release \
            --verbosity minimal

      - name: Run fast tests only
        run: |
          dotnet test ${{ env.SOLUTION_FILE }} \
            --no-build \
            --configuration Release \
            --verbosity minimal \
            --filter "Category!=Integration&Category!=Slow" \
            --logger "console;verbosity=minimal"

  full-test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: |
          dotnet build ${{ env.SOLUTION_FILE }} \
            --no-restore \
            --configuration Release \
            --verbosity minimal

      - name: Run all tests with coverage
        run: |
          dotnet test ${{ env.SOLUTION_FILE }} \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory artifacts/test-results \
            --logger "trx;LogFileName=test_results.trx"

      - name: Generate Code Coverage Report
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          reportgenerator \
            "-reports:artifacts/test-results/**/coverage.cobertura.xml" \
            "-targetdir:coverage_report" \
            "-reporttypes:Html;Cobertura"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            artifacts/test-results/**/*.trx
            coverage_report/
          retention-days: 30

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, full-test]
    if: needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/EstateAccessManagement.API/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64